@page "/home"
@using SocialMediaBlazorApp.Services
@using SocialMediaBlazorApp.Models
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Components.Forms
@using System.IdentityModel.Tokens.Jwt
@inject IHttpClientFactory HttpClientFactory
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject AuthService AuthService

<PageTitle>Home</PageTitle>

<div class="home-container">
    <!-- Greeting Section -->
    <div class="greeting">
        @if (isLoading)
        {
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {
            <h2>
                <i class="fas fa-hand-wave me-2"></i>
                Welcome, @currentUserFirstName @currentUserLastName!
            </h2>
            <p class="greeting-message mt-3">
                <i class="fas fa-sun text-warning me-2"></i>
                How's your day going? Here's a quick smile for you 😊:
            </p>
            <p class="daily-joke mt-2">
                @currentJoke
            </p>
        }
    </div>

    <!-- Create Post Section -->
    <div class="section-title mb-3">
        <h3>Create New Post</h3>
    </div>
    <div class="create-post-container">
        <div class="card">
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Share your thoughts</label>
                    <textarea class="form-control"
                              placeholder="What's on your mind?"
                              @bind="newPostContent"
                              @bind:event="oninput"
                              maxlength="500"
                              rows="3"
                              disabled="@isSubmitting">
                </textarea>
                    <small class="text-muted">@(500 - (newPostContent?.Length ?? 0)) characters remaining</small>
                </div>

                <!-- Image Upload Section -->
                <div class="mb-3">
                    <label class="form-label">Add an image</label>
                    <div class="d-flex align-items-center gap-2">
                        <InputFile OnChange="@HandleImageUpload"
                                   accept="image/*"
                                   class="form-control"
                                   disabled="@isSubmitting" />
                        @if (isUploadingImage)
                        {
                            <div class="spinner-border spinner-border-sm" role="status">
                                <span class="visually-hidden">Uploading...</span>
                            </div>
                        }
                    </div>

                    @if (!string.IsNullOrEmpty(newPostImageUrl))
                    {
                        <div class="mt-2 position-relative selected-image-container">
                            <img src="@GetFullImageUrl(newPostImageUrl)"
                                 class="img-thumbnail"
                                 style="max-height: 200px;"
                                 alt="Selected image"
                                 @onerror="@(e => HandleImageError(e))" />
                            <button class="btn btn-sm btn-danger position-absolute top-0 end-0 m-1"
                                    @onclick="RemoveSelectedImage"
                                    type="button">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    }
                </div>

                <!-- Privacy Toggle -->
                <div class="mb-4">
                    <label class="form-label d-block">Post Privacy</label>
                    <div class="form-check">
                        <input class="form-check-input"
                               type="checkbox"
                               @bind="newPostIsPublic"
                               id="postPrivacy">
                        <label class="form-check-label" for="postPrivacy">
                            <i class="fas fa-globe me-1"></i> Make this post public
                        </label>
                    </div>
                    <small class="text-muted d-block mt-1">
                        @if (newPostIsPublic)
                        {
                            <span><i class="fas fa-info-circle me-1"></i> Everyone can see this post</span>
                        }
                        else
                        {
                            <span><i class="fas fa-lock me-1"></i> Only you can see this post</span>
                        }
                    </small>
                </div>

                <div class="d-flex justify-content-end">
                    <button class="btn btn-primary"
                            @onclick="SubmitPost"
                            disabled="@(isSubmitting || string.IsNullOrWhiteSpace(newPostContent))">
                        @if (isSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                            <span>Posting...</span>
                        }
                        else
                        {
                            <i class="fas fa-paper-plane me-1"></i>
                            <span>Share Post</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Search and Filter Controls -->
    <div class="section-title mb-3">
        <h3>Search & Filter Posts</h3>
    </div>
    <div class="search-filter-container">
        <div class="card">
            <div class="card-body">
                <div class="row g-3">
                    <!-- Search -->
                    <div class="col-md-6">
                        <label class="form-label">Search Posts</label>
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fas fa-search"></i>
                            </span>
                            <input type="text"
                                   class="form-control"
                                   placeholder="Search by content or author..."
                                   @bind-value="searchTerm"
                                   @bind-value:event="oninput" />
                        </div>
                    </div>

                    <!-- Filters -->
                    <div class="col-md-3">
                        <label class="form-label">Privacy Filter</label>
                        <select class="form-select" @bind="privacyFilter">
                            <option value="all">All Posts</option>
                            <option value="public">Public Posts Only</option>
                            <option value="private">Private Posts Only</option>
                        </select>
                    </div>

                    <!-- Sort -->
                    <div class="col-md-3">
                        <label class="form-label">Sort By</label>
                        <select class="form-select" @bind="sortOption">
                            <option value="newest">Newest First</option>
                            <option value="oldest">Oldest First</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Posts Feed -->
    <div class="section-title mb-3 posts-feed-title">
        <h3>
            <i class="fas fa-stream me-2"></i>
            Posts Feed
        </h3>
        @if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            <small class="text-muted">
                Showing results for: "@searchTerm"
            </small>
        }
    </div>
    <div class="posts-feed mt-4">
        @if (isLoading)
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading posts...</span>
                </div>
            </div>
        }
        else if (!posts.Any())
        {
            <div class="alert alert-info">
                <i class="fas fa-info-circle me-2"></i>
                No posts available. Be the first to post!
            </div>
        }
        else
        {
            @foreach (var post in FilteredAndSortedPosts)
            {
                <div class="post-item card mb-4" @key="post.Id">
                    <div class="card-body">
                        <div class="post-header mb-3">
                            <div class="d-flex justify-content-between align-items-start">
                                <div class="user-info">
                                    <h5 class="card-title mb-1">@post.FirstName @post.LastName</h5>
                                    <div class="user-metadata">
                                        <small class="text-muted">
                                            Joined @post.UserRegisteredAt.ToString("MMMM d, yyyy")
                                        </small>
                                    </div>
                                </div>
                                <div class="d-flex flex-column align-items-end">
                                    <span class="badge mb-2 @(post.IsPublic ? "bg-success" : "bg-secondary")">
                                        @(post.IsPublic ? "Public" : "Private")
                                    </span>
                                    <small class="text-muted post-time">
                                        @FormatTimestamp(post.CreatedAt)
                                    </small>
                                </div>
                            </div>
                        </div>

                        <div class="post-content">
                            <p class="card-text mb-3">@post.Content</p>

                            @if (!string.IsNullOrEmpty(post.ImageUrl))
                            {
                                <div class="post-image mb-3">
                                    <img src="@GetFullImageUrl(post.ImageUrl)"
                                         class="img-fluid rounded shadow-sm"
                                         alt="Post image"
                                         @onerror="@(e => HandleImageError(e))" />
                                </div>
                            }
                        </div>

                        <div class="post-actions mt-3 pt-3 border-top">
                            @if (post.UserId.ToString() == currentUserId)
                            {
                                <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => EditPost(post)">
                                    <i class="fas fa-edit me-1"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeletePostWithConfirmation(post.Id)">
                                    <i class="fas fa-trash me-1"></i> Delete
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Edit Modal -->
    @if (isEditModalOpen)
    {
        <div class="modal show" style="display: block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Post</h5>
                        <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Content</label>
                            <textarea class="form-control"
                                      @bind="editingPost.Content"
                                      @bind:event="oninput"
                                      rows="3"
                                      maxlength="500">@editingPost.Content</textarea>
                            <small class="text-muted">@(500 - (editingPost.Content?.Length ?? 0)) characters remaining</small>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Image</label>
                            <InputFile OnChange="@HandleEditImageUpload" accept="image/*" class="form-control" />
                            @if (!string.IsNullOrEmpty(editingPost.ImageUrl))
                            {
                                <div class="mt-2 position-relative selected-image-container">
                                    <img src="@GetFullImageUrl(editingPost.ImageUrl)"
                                         class="img-thumbnail"
                                         style="max-height: 200px;"
                                         alt="Post image"
                                         @onerror="@(e => HandleImageError(e))" />
                                    <button class="btn btn-sm btn-danger position-absolute top-0 end-0 m-1"
                                            @onclick="RemoveEditImage"
                                            type="button">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            }
                        </div>

                        <div class="mb-4">
                            <label class="form-label d-block">Post Privacy</label>
                            <div class="form-check">
                                <input class="form-check-input"
                                       type="checkbox"
                                       @bind="editingPost.IsPublic"
                                       id="editPostPrivacy">
                                <label class="form-check-label" for="editPostPrivacy">
                                    <i class="fas fa-globe me-1"></i> Make this post public
                                </label>
                            </div>
                            <small class="text-muted d-block mt-1">
                                @if (editingPost.IsPublic)
                                {
                                    <span><i class="fas fa-info-circle me-1"></i> Everyone can see this post</span>
                                }
                                else
                                {
                                    <span><i class="fas fa-lock me-1"></i> Only you can see this post</span>
                                }
                            </small>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button"
                                class="btn btn-secondary"
                                @onclick="CloseEditModal">
                            Cancel
                        </button>
                        <button type="button"
                                class="btn btn-primary"
                                @onclick="SaveEditedPost"
                                disabled="@(string.IsNullOrWhiteSpace(editingPost.Content))">
                            <i class="fas fa-save me-1"></i> Save changes
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    /* Container Layout */
    .home-container {
        max-width: 900px;
        margin: 0 auto;
        padding: 1.5rem;
    }

    /* Greeting Section */
    .greeting {
        text-align: center;
        margin-bottom: 2.5rem;
        padding: 1.5rem;
        background: linear-gradient(135deg, #f8f9fa, white, #f8f9fa);
        border-radius: 12px;
        box-shadow: 0 2px 15px rgba(0, 0, 0, 0.05);
        border: 1px solid rgba(0, 0, 0, 0.05);
    }

        .greeting h2 {
            font-size: 2.2rem;
            font-weight: 700;
            color: #2c3e50;
            margin: 0;
            text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.05);
        }

    /* Create Post Section */
    .create-post-container {
        position: relative;
        margin-bottom: 3rem;
        padding-bottom: 2rem;
    }

        .create-post-container::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 100%;
            height: 1px;
            background: linear-gradient(to right, transparent, #dee2e6, transparent);
        }

        .create-post-container .card {
            background-color: #f8f9fa;
            border-radius: 12px;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.05);
            transition: box-shadow 0.3s ease;
        }

            .create-post-container .card:focus-within {
                box-shadow: 0 5px 20px rgba(0, 123, 255, 0.1);
            }

    /* Search & Filter Section */
    .search-filter-container {
        position: relative;
        margin-bottom: 3rem;
        padding-bottom: 2rem;
    }

        .search-filter-container::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 100%;
            height: 1px;
            background: linear-gradient(to right, transparent, #dee2e6, transparent);
        }

        .search-filter-container .card {
            background-color: #f8f9fa;
            border-radius: 12px;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.05);
            transition: box-shadow 0.3s ease;
        }

            .search-filter-container .card:focus-within {
                box-shadow: 0 5px 20px rgba(0, 123, 255, 0.1);
            }

        .search-filter-container .input-group {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            overflow: hidden;
        }

        .search-filter-container .input-group-text {
            background-color: #f8f9fa;
            border: none;
            color: #6c757d;
        }

        .search-filter-container .form-control {
            border: none;
            background-color: white;
        }

            .search-filter-container .form-control:focus {
                box-shadow: none;
                background-color: white;
            }

        .search-filter-container .form-select {
            background-color: white;
            border: 1px solid #dee2e6;
        }

            .search-filter-container .form-select:focus {
                border-color: #80bdff;
                box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.15);
            }

    /* Posts Feed Section */
    .posts-feed {
        max-height: 80vh;
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: #888 #f1f1f1;
        padding-right: 0.5rem;
    }

    .greeting {
        text-align: center;
        margin-bottom: 2.5rem;
        padding: 1.5rem;
        background: linear-gradient(135deg, #f8f9fa, white, #f8f9fa);
        border-radius: 12px;
        box-shadow: 0 2px 15px rgba(0, 0, 0, 0.05);
        border: 1px solid rgba(0, 0, 0, 0.05);
    }

        .greeting h2 {
            font-size: 2.2rem;
            font-weight: 700;
            color: #2c3e50;
            margin: 0;
            text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.05);
        }

    .greeting-message {
        font-size: 1.2rem;
        color: #4a5568;
        margin: 1rem 0;
    }

    .daily-joke {
        font-size: 1.1rem;
        color: #718096;
        font-style: italic;
        background: rgba(255, 255, 255, 0.7);
        padding: 1rem;
        border-radius: 8px;
        margin: 0;
        display: inline-block;
    }

    /* Post Items */
    .post-item {
        border-radius: 12px;
        border: none;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        margin-bottom: 1.5rem;
        background-color: white;
    }

        .post-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
        }

    /* User Info */
    .user-info {
        padding: 0.5rem 0;
    }

    .card-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #2c3e50;
    }

    .user-metadata {
        font-size: 0.9rem;
        color: #6c757d;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    /* Section Titles */
    .section-title {
        padding: 0.5rem 0;
        border-bottom: 2px solid #e9ecef;
        margin-bottom: 1.5rem;
    }

        .section-title h3 {
            font-size: 1.5rem;
            font-weight: 600;
            color: #2c3e50;
            margin: 0;
        }

    /* Post Content */
    .post-content {
        font-size: 1.1rem;
        line-height: 1.6;
        color: #2c3e50;
        padding: 0.5rem 0;
    }

        .post-content p {
            margin-bottom: 1rem;
            white-space: pre-line;
        }

    .post-time {
        font-size: 0.85rem;
        color: #6c757d;
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    /* Post Images */
    .post-image {
        position: relative;
        border-radius: 8px;
        overflow: hidden;
        margin: 1rem 0;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

        .post-image img {
            width: 100%;
            max-height: 500px;
            object-fit: contain;
            background-color: #f8f9fa;
        }

    .selected-image-container {
        position: relative;
        display: inline-block;
        border-radius: 8px;
        overflow: hidden;
    }

    /* Form Controls */
    .form-control, .form-select {
        border-radius: 8px;
        border: 1px solid #dee2e6;
        padding: 0.625rem;
        font-size: 0.95rem;
    }

        .form-control:focus, .form-select:focus {
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.15);
        }

    .form-label {
        font-weight: 500;
        color: #495057;
        margin-bottom: 0.5rem;
    }

    /* Post Actions */
    .post-actions {
        display: flex;
        gap: 0.5rem;
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 1px solid #dee2e6;
    }

        .post-actions button {
            padding: 0.375rem 1rem;
            font-size: 0.9rem;
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
            transition: all 0.2s ease;
        }

            .post-actions button:hover {
                transform: translateY(-1px);
            }

    /* Badges */
    .badge {
        padding: 0.5em 1em;
        font-size: 0.85rem;
        font-weight: 500;
        border-radius: 6px;
    }

    /* Modal Styles */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1050;
        width: 100%;
        height: 100vh; 
        display: flex !important; 
        align-items: center; 
        justify-content: center; 
        overflow-x: hidden;
        overflow-y: auto;
        outline: 0;
        background-color: rgba(0, 0, 0, 0.5); 
    }

    .modal-dialog {
        position: relative;
        width: 100%;
        max-width: 500px;
        margin: 0 auto; 
        pointer-events: auto;
        transform: translate(0, 0); 
    }

    .modal-content {
        position: relative;
        display: flex;
        flex-direction: column;
        width: 100%;
        background-color: #fff;
        border-radius: 0.5rem;
        box-shadow: 0 0.5rem 2rem rgba(0, 0, 0, 0.2); 
        animation: modalFadeIn 0.3s ease-out; 
    }

    .modal-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
    }

    .modal-body {
        position: relative;
        flex: 1 1 auto;
        padding: 1.5rem; 
    }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        gap: 0.5rem;
        padding: 1rem;
        border-top: 1px solid #dee2e6;
    }

    .modal-backdrop {
        display: none;
    }

    .show {
        display: flex !important;
    }

    .fade {
        transition: opacity 0.3s ease-out;
    }
    /* Custom Scrollbar */
    .posts-feed::-webkit-scrollbar {
        width: 8px;
    }

    .posts-feed::-webkit-scrollbar-track {
        background: #f8f9fa;
        border-radius: 4px;
    }

    .posts-feed::-webkit-scrollbar-thumb {
        background: #cbd5e0;
        border-radius: 4px;
        transition: background 0.2s ease;
    }

        .posts-feed::-webkit-scrollbar-thumb:hover {
            background: #a0aec0;
        }

    /* Loading States */
    .spinner-border {
        color: #3182ce;
    }

    /* Empty State */
    .alert-info {
        background-color: #ebf8ff;
        border-color: #bee3f8;
        color: #2c5282;
        border-radius: 8px;
    }
    /* Modal Styles */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1050;
        width: 100%;
        height: 100%;
        overflow-x: hidden;
        overflow-y: auto;
        outline: 0;
    }

    .modal-dialog {
        position: relative;
        width: auto;
        margin: 1.75rem;
        pointer-events: none;
    }

    .modal-dialog-centered {
        display: flex;
        align-items: center;
        min-height: calc(100% - 3.5rem);
    }

    .modal-content {
        position: relative;
        display: flex;
        flex-direction: column;
        width: 100%;
        pointer-events: auto;
        background-color: #fff;
        background-clip: padding-box;
        border-radius: 0.5rem;
        outline: 0;
    }

    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1040;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .show {
        display: block;
    }

    .d-none {
        display: none;
    }
</style>

@code {
    private List<PostListDTO> posts = new();
    private string newPostContent = string.Empty;
    private bool isLoading = true;
    private bool isSubmitting = false;
    private bool isDeletingPost = false;
    private HttpClient? postClient;
    private string? currentUserId;
    private string? newPostImageUrl;
    private bool newPostIsPublic = true;
    private bool isUploadingImage;
    private bool isEditModalOpen;
    private PostEditModel editingPost = new();
    private string searchTerm = string.Empty;
    private string privacyFilter = "all";
    private string sortOption = "newest";
    private string? currentUserFirstName;
    private string? currentUserLastName;
    private string currentJoke;
    private UserSettings? settings;
    private const string SETTINGS_KEY = "socialMediaSettings";

    protected override void OnInitialized()
    {
        postClient = HttpClientFactory.CreateClient("PostService");
    }

    protected override async Task OnInitializedAsync()
    {   
        await LoadSettings();
        if (!await AuthService.IsAuthenticatedAsync())
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        try
        {
            isLoading = true;
            currentUserId = await GetCurrentUserIdFromToken();
            // Apply settings
            if (settings != null)
            {
                newPostIsPublic = settings.DefaultPostsPublic;
                sortOption = settings.DefaultSortOption;
                // Only show joke if enabled in settings
                if (settings.ShowDailyJokes)
                {
                    currentJoke = GetRandomJoke();
                }
            }
            await LoadUserDetails();
            await LoadPostsAsync();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadSettings()
    {
        try
        {
            var settingsJson = await JS.InvokeAsync<string>("localStorage.getItem", SETTINGS_KEY);
            if (!string.IsNullOrEmpty(settingsJson))
            {
                settings = System.Text.Json.JsonSerializer.Deserialize<UserSettings>(settingsJson);
            }
        }
        catch
        {
            // If there's any error, use default values
            Console.Error.WriteLine("Failed to load settings");
        }
    }

    private string GetRandomJoke()
    {   
        // jokes stored
        var jokes = new[]
        {
        "Why don't programmers like nature? It has too many bugs! 🐛",
        "Having a great day is like good code - it's all about positive returns! 💻",
        "Life is like a function - it's all about the output you create! ✨",
        "Keep smiling, it's the best way to debug a bad day! 😊",
        "Today's forecast: 100% chance of awesome with scattered moments of brilliance! ⭐",
        "You've got this! Your success rate is 100% so far! 🌟",
        "Remember: even a broken clock is right twice a day - you're doing much better! 🕒",
    };

        var random = new Random();
        return jokes[random.Next(jokes.Length)];
    }

    private async Task LoadUserDetails()
    {
        try
        {
            Console.WriteLine($"Starting LoadUserDetails. CurrentUserId: {currentUserId}"); 

            var userClient = HttpClientFactory.CreateClient("UserService");
            var token = await AuthService.GetTokenAsync();
            Console.WriteLine($"Token: {token}"); 

            userClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await userClient.GetAsync($"api/user/{currentUserId}");
            Console.WriteLine($"Response status: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                var user = await response.Content.ReadFromJsonAsync<UserDTO>();
                if (user != null)
                {
                    Console.WriteLine($"User loaded: {user.FirstName} {user.LastName}"); 
                    currentUserFirstName = user.FirstName;
                    currentUserLastName = user.LastName;
                    StateHasChanged();
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error response: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in LoadUserDetails: {ex.Message}"); 
            Console.WriteLine(ex.StackTrace); 
        }
    }

    private async Task EnsureAuthorizationForClient(HttpClient client)
    {
        var token = await AuthService.GetTokenAsync();
        if (!string.IsNullOrEmpty(token))
        {
            client.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);
        }
    }

    private IEnumerable<PostListDTO> FilteredAndSortedPosts
    {
        get
        {
            var filtered = posts.AsEnumerable();

            // Apply search
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                filtered = filtered.Where(p =>
                    p.Content.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    p.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    p.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
            }

            // Apply privacy filter
            filtered = privacyFilter switch
            {
                "public" => filtered.Where(p => p.IsPublic),
                "private" => filtered.Where(p => !p.IsPublic),
                _ => filtered
            };

            // Apply sorting
            filtered = sortOption switch
            {
                "oldest" => filtered.OrderBy(p => p.CreatedAt),
                _ => filtered.OrderByDescending(p => p.CreatedAt) // newest is default
            };

            return filtered;
        }
    }

    private async Task<string?> GetCurrentUserIdFromToken()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            if (string.IsNullOrEmpty(token))
            {
                Console.WriteLine("No token found");
                return null;
            }

            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);

            // claims in the logs
            foreach (var claim in jwtToken.Claims)
            {
                Console.WriteLine($"Claim Type: {claim.Type}, Value: {claim.Value}");
            }

            var userId = jwtToken.Claims.FirstOrDefault(c => c.Type == "nameid")?.Value;
            Console.WriteLine($"Found userId in token: {userId}");
            return userId;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in GetCurrentUserIdFromToken: {ex.Message}");
            return null;
        }
    }

    private async Task EnsureAuthorization()
    {
        var token = await AuthService.GetTokenAsync();
        if (!string.IsNullOrEmpty(token))
        {
            postClient!.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);
        }
    }

    private async Task LoadPostsAsync()
    {
        try
        {
            await EnsureAuthorization();
            var response = await postClient!.GetAsync("api/post");

            if (response.IsSuccessStatusCode)
            {
                var loadedPosts = await response.Content.ReadFromJsonAsync<List<PostListDTO>>();
                if (loadedPosts != null)
                {
                    posts = loadedPosts;
                    StateHasChanged();
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError($"Failed to load posts: {error}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Failed to load posts. Please try again later.");
            Console.Error.WriteLine($"Error fetching posts: {ex}");
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            isUploadingImage = true;
            var imageFile = e.File;
            var resizedImage = await ResizeImage(imageFile, 800);
            var imageContent = new MultipartFormDataContent();
            imageContent.Add(new ByteArrayContent(resizedImage), "file", imageFile.Name);

            await EnsureAuthorization();
            var response = await postClient!.PostAsync("api/post/upload", imageContent);

            if (response.IsSuccessStatusCode)
            {
                var uploadResult = await response.Content.ReadFromJsonAsync<UploadResult>();
                if (uploadResult != null)
                {
                    newPostImageUrl = uploadResult.Url;
                    StateHasChanged();
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError($"Failed to upload image: {error}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Failed to upload image.");
            Console.Error.WriteLine($"Error uploading image: {ex}");
        }
        finally
        {
            isUploadingImage = false;
        }
    }

    private async Task<byte[]> ResizeImage(IBrowserFile file, int maxWidth)
    {
        using var imageStream = file.OpenReadStream(maxAllowedSize: 10485760); // 10MB max
        using var memoryStream = new MemoryStream();
        await imageStream.CopyToAsync(memoryStream);
        return memoryStream.ToArray();
    }

    private void RemoveSelectedImage()
    {
        newPostImageUrl = null;
    }

    private async Task SubmitPost()
    {
        if (string.IsNullOrWhiteSpace(newPostContent)) return;

        try
        {
            isSubmitting = true;
            await EnsureAuthorization();

            var createPostDto = new CreatePostDTO
                {
                    Content = newPostContent,
                    ImageUrl = newPostImageUrl,
                    IsPublic = newPostIsPublic
                };

            var response = await postClient!.PostAsJsonAsync("api/post", createPostDto);

            if (response.IsSuccessStatusCode)
            {
                await LoadPostsAsync();
                newPostContent = string.Empty;
                newPostImageUrl = null;
                newPostIsPublic = true;
                ToastService.ShowSuccess("Post created successfully!");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError($"Failed to create post: {error}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Failed to create post. Please try again.");
            Console.Error.WriteLine($"Error creating post: {ex}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task DeletePostWithConfirmation(int postId)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", new[] { "Are you sure you want to delete this post?" });
        if (confirmed)
        {
            await DeletePost(postId);
        }
    }

    private async Task DeletePost(int postId)
    {
        if (isDeletingPost) return;

        try
        {
            isDeletingPost = true;
            await EnsureAuthorization();
            var response = await postClient!.DeleteAsync($"api/post/{postId}");

            if (response.IsSuccessStatusCode)
            {
                posts.RemoveAll(p => p.Id == postId);
                StateHasChanged();
                ToastService.ShowSuccess("Post deleted successfully!");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError($"Failed to delete post: {error}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Failed to delete post. Please try again.");
            Console.Error.WriteLine($"Error deleting post: {ex}");
        }
        finally
        {
            isDeletingPost = false;
        }
    }

    private void EditPost(PostListDTO post)
    {
        editingPost = new PostEditModel
            {
                Id = post.Id,
                Content = post.Content?.Trim(),
                ImageUrl = post.ImageUrl,
                IsPublic = post.IsPublic
            };
        isEditModalOpen = true;
        StateHasChanged();
    }

    private async Task HandleEditImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            isUploadingImage = true;
            var imageFile = e.File;
            var resizedImage = await ResizeImage(imageFile, 800);
            var imageContent = new MultipartFormDataContent();
            imageContent.Add(new ByteArrayContent(resizedImage), "file", imageFile.Name);

            await EnsureAuthorization();
            var response = await postClient!.PostAsync("api/post/upload", imageContent);

            if (response.IsSuccessStatusCode)
            {
                var uploadResult = await response.Content.ReadFromJsonAsync<UploadResult>();
                if (uploadResult != null)
                {
                    editingPost.ImageUrl = uploadResult.Url;
                    StateHasChanged();
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError($"Failed to upload image: {error}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Failed to upload image.");
            Console.Error.WriteLine($"Error uploading image: {ex}");
        }
        finally
        {
            isUploadingImage = false;
        }
    }

    private void RemoveEditImage()
    {
        editingPost.ImageUrl = null;
    }

    private void CloseEditModal()
    {
        isEditModalOpen = false;
        editingPost = new PostEditModel();
        StateHasChanged();
    }

    private async Task SaveEditedPost()
    {
        try
        {
            await EnsureAuthorization();
            var updatePostDto = new UpdatePostDTO
                {
                    Id = editingPost.Id,
                    Content = editingPost.Content,
                    ImageUrl = editingPost.ImageUrl,
                    IsPublic = editingPost.IsPublic
                };

            var response = await postClient!.PutAsJsonAsync($"api/post/{editingPost.Id}", updatePostDto);

            if (response.IsSuccessStatusCode)
            {
                await LoadPostsAsync();
                CloseEditModal();
                ToastService.ShowSuccess("Post updated successfully!");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ToastService.ShowError($"Failed to update post: {error}");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Failed to update post. Please try again.");
            Console.Error.WriteLine($"Error updating post: {ex}");
        }
    }

    private string FormatTimestamp(DateTime timestamp)
    {
        var timeDiff = DateTime.UtcNow - timestamp;

        if (timeDiff.TotalMinutes < 1)
            return "Just now";
        if (timeDiff.TotalMinutes < 60)
            return $"{(int)timeDiff.TotalMinutes}m ago";
        if (timeDiff.TotalHours < 24)
            return $"{(int)timeDiff.TotalHours}h ago";
        if (timeDiff.TotalDays < 7)
            return $"{(int)timeDiff.TotalDays}d ago";

        return timestamp.ToString("MMM dd, yyyy");
    }

    private string GetFullImageUrl(string? imageUrl)
    {
        if (string.IsNullOrEmpty(imageUrl))
            return string.Empty;

        var baseUrl = postClient?.BaseAddress?.ToString()?.TrimEnd('/');
        return $"{baseUrl}{imageUrl}";
    }

    private void HandleImageError(ErrorEventArgs e)
    {
        Console.Error.WriteLine("Failed to load image");

    }

    private class PostEditModel
    {
        public int Id { get; set; }
        public string Content { get; set; } = string.Empty;
        public string? ImageUrl { get; set; }
        public bool IsPublic { get; set; }
    }

    public class UserSettings
    {
        public bool DefaultPostsPublic { get; set; }
        public string DefaultSortOption { get; set; } = "newest";
        public bool ShowDailyJokes { get; set; }
    }
}