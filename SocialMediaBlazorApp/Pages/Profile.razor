@page "/profile"
@using SocialMediaBlazorApp.Services
@using System.Net.Http.Headers
@using SocialMediaBlazorApp.Models
@inject IHttpClientFactory HttpClientFactory
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject AuthService AuthService

<PageTitle>Profile</PageTitle>

<div class="profile-container">
    @if (isLoading)
    {
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else if (userProfile != null)
    {
        <div class="profile-header card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3 text-center">
                        <div class="profile-avatar">
                            <i class="fas fa-user-circle"></i>
                        </div>
                    </div>
                    <div class="col-md-9">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <h2 class="profile-name">@userProfile.FirstName @userProfile.LastName</h2>
                                <p class="profile-email">
                                    <i class="fas fa-envelope me-2"></i>@userProfile.Email
                                </p>
                                <p class="profile-joined">
                                    <i class="fas fa-calendar me-2"></i>Member since @userProfile.RegisteredAt.ToString("MMMM d, yyyy")
                                </p>
                            </div>
                            <button class="btn btn-primary" @onclick="() => showEditForm = true">
                                <i class="fas fa-edit me-2"></i>Edit Profile
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @if (showEditForm)
        {
            <div class="modal-backdrop show"></div>
            <div class="modal d-block" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Edit Profile</h5>
                            <button type="button" class="btn-close" @onclick="() => showEditForm = false"></button>
                        </div>
                        <div class="modal-body">
                            @if (!string.IsNullOrEmpty(modalError))
                            {
                                <div class="alert alert-danger">@modalError</div>
                            }
                            <EditForm Model="editUserDto" OnValidSubmit="HandleValidSubmit">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="@(context.GetValidationMessages().Any() ? "alert alert-danger" : "")" />

                                <div class="mb-3">
                                    <label class="form-label">First Name</label>
                                    <InputText class="form-control" @bind-Value="editUserDto.FirstName" />
                                    <ValidationMessage For="@(() => editUserDto.FirstName)" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Last Name</label>
                                    <InputText class="form-control" @bind-Value="editUserDto.LastName" />
                                    <ValidationMessage For="@(() => editUserDto.LastName)" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Email</label>
                                    <InputText class="form-control" @bind-Value="editUserDto.Email" />
                                    <ValidationMessage For="@(() => editUserDto.Email)" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">New Password (leave blank to keep current)</label>
                                    <InputText type="password" class="form-control" @bind-Value="editUserDto.NewPassword" />
                                    <ValidationMessage For="@(() => editUserDto.NewPassword)" />
                                </div>

                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" @onclick="() => showEditForm = false">Cancel</button>
                                    <button type="submit" class="btn btn-primary">Save Changes</button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="profile-stats card mt-4">
            <div class="card-body">
                <div class="row text-center">
                    <div class="col-md-4">
                        <div class="stat-item">
                            <div class="stat-value">@totalPosts</div>
                            <div class="stat-label">Total Posts</div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="stat-item">
                            <div class="stat-value">@publicPosts</div>
                            <div class="stat-label">Public Posts</div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="stat-item">
                            <div class="stat-value">@privatePosts</div>
                            <div class="stat-label">Private Posts</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="profile-posts card mt-4">
            <div class="card-body">
                <h3 class="section-title">Your Posts</h3>
                @if (!userPosts.Any())
                {
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        You haven't created any posts yet.
                    </div>
                }
                else
                {
                    foreach (var post in userPosts)
                    {
                        <div class="user-post card mb-3">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-start mb-3">
                                    <div class="post-meta">
                                        <small class="text-muted">
                                            <i class="far fa-clock me-1"></i>
                                            @FormatTimestamp(post.CreatedAt)
                                        </small>
                                        <span class="badge ms-2 @(post.IsPublic ? "bg-success" : "bg-secondary")">
                                            @(post.IsPublic ? "Public" : "Private")
                                        </span>
                                    </div>
                                </div>

                                <p class="post-content">@post.Content</p>

                                @if (!string.IsNullOrEmpty(post.ImageUrl))
                                {
                                    <div class="post-image mt-2">
                                        <img src="@GetFullImageUrl(post.ImageUrl)"
                                             class="img-fluid rounded"
                                             alt="Post image" />
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    }
</div>

<style>
    .profile-container {
        max-width: 900px;
        margin: 0 auto;
        padding: 2rem 1rem;
    }

    .profile-header {
        border: none;
        border-radius: 15px;
        box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1);
    }

    .profile-avatar {
        font-size: 5rem;
        color: #3182ce;
        margin-bottom: 1rem;
    }

    .profile-name {
        font-size: 2rem;
        font-weight: 700;
        color: #2d3748;
        margin-bottom: 0.5rem;
    }

    .profile-email, .profile-joined {
        color: #4a5568;
        margin-bottom: 0.5rem;
        font-size: 1.1rem;
    }

    .profile-stats {
        border: none;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .stat-item {
        padding: 1rem;
    }

    .stat-value {
        font-size: 2rem;
        font-weight: 700;
        color: #3182ce;
    }

    .stat-label {
        color: #4a5568;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .section-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #2d3748;
        margin-bottom: 1.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #e2e8f0;
    }

    .user-post {
        border: none;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        transition: transform 0.2s ease;
    }

        .user-post:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

    .post-meta {
        font-size: 0.9rem;
    }

    .post-content {
        font-size: 1.1rem;
        line-height: 1.6;
        color: #2d3748;
    }

    .post-image img {
        max-height: 300px;
        width: auto;
        margin: 0 auto;
        display: block;
        border-radius: 8px;
    }

    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1040;
    }

    .modal {
        z-index: 1050;
    }

    .btn-primary {
        background-color: #3182ce;
        border-color: #3182ce;
    }

        .btn-primary:hover {
            background-color: #2c5282;
            border-color: #2c5282;
        }
</style>

@code {
    private UserProfileDTO? userProfile;
    private List<PostListDTO> userPosts = new();
    private bool isLoading = true;
    private string? currentUserId;
    private int totalPosts => userPosts.Count;
    private int publicPosts => userPosts.Count(p => p.IsPublic);
    private int privatePosts => userPosts.Count(p => !p.IsPublic);
    private bool showEditForm = false;
    private UpdateUserDto editUserDto = new();
    private string modalError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (!await AuthService.IsAuthenticatedAsync())
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        try
        {
            isLoading = true;
            currentUserId = await GetCurrentUserIdFromToken();
            if (currentUserId != null)
            {
                await LoadUserProfile();
                if (userProfile != null)
                {
                    InitializeEditForm();
                }
                await LoadUserPosts();
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadUserProfile()
    {
        try
        {
            var userClient = HttpClientFactory.CreateClient("UserService");
            await EnsureAuthorization(userClient);
            var response = await userClient.GetAsync($"api/user/{currentUserId}");

            if (response.IsSuccessStatusCode)
            {
                userProfile = await response.Content.ReadFromJsonAsync<UserProfileDTO>();
            }
            else
            {
                ToastService.ShowError("Failed to load user profile");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error loading profile");
            Console.Error.WriteLine($"Error loading profile: {ex}");
        }
    }

    private async Task LoadUserPosts()
    {
        try
        {
            var postClient = HttpClientFactory.CreateClient("PostService");
            await EnsureAuthorization(postClient);
            var response = await postClient.GetAsync($"api/post/user/{currentUserId}");

            if (response.IsSuccessStatusCode)
            {
                var posts = await response.Content.ReadFromJsonAsync<List<PostListDTO>>();
                if (posts != null)
                {
                    userPosts = posts.OrderByDescending(p => p.CreatedAt).ToList();
                }
            }
            else
            {
                ToastService.ShowError("Failed to load user posts");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error loading posts");
            Console.Error.WriteLine($"Error loading posts: {ex}");
        }
    }

    private async Task<string?> GetCurrentUserIdFromToken()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            if (string.IsNullOrEmpty(token))
                return null;

            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            return jwtToken.Claims.FirstOrDefault(c => c.Type == "nameid")?.Value;
        }
        catch
        {
            return null;
        }
    }

    private async Task EnsureAuthorization(HttpClient client)
    {
        var token = await AuthService.GetTokenAsync();
        if (!string.IsNullOrEmpty(token))
        {
            Console.WriteLine("Token found: " + token.Substring(0, 20) + "..."); 
            client.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);
        }
        else
        {
            Console.WriteLine("No token found!");
        }
    }

    private string FormatTimestamp(DateTime timestamp)
    {
        var timeDiff = DateTime.UtcNow - timestamp;

        if (timeDiff.TotalMinutes < 1)
            return "Just now";
        if (timeDiff.TotalMinutes < 60)
            return $"{(int)timeDiff.TotalMinutes}m ago";
        if (timeDiff.TotalHours < 24)
            return $"{(int)timeDiff.TotalHours}h ago";
        if (timeDiff.TotalDays < 7)
            return $"{(int)timeDiff.TotalDays}d ago";

        return timestamp.ToString("MMM dd, yyyy");
    }

    private string GetFullImageUrl(string? imageUrl)
    {
        if (string.IsNullOrEmpty(imageUrl))
            return string.Empty;

        var baseUrl = HttpClientFactory.CreateClient("PostService").BaseAddress?.ToString()?.TrimEnd('/');
        return $"{baseUrl}{imageUrl}";
    }

    private void InitializeEditForm()
    {
        if (userProfile != null)
        {
            editUserDto = new UpdateUserDto
                {
                    Id = int.Parse(currentUserId!),
                    FirstName = userProfile.FirstName,
                    LastName = userProfile.LastName,
                    Email = userProfile.Email
                };
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            modalError = string.Empty; 
            var userClient = HttpClientFactory.CreateClient("UserService");
            await EnsureAuthorization(userClient);

            var response = await userClient.PutAsJsonAsync($"api/user/{currentUserId}", editUserDto);

            if (response.IsSuccessStatusCode)
            {
                await LoadUserProfile();
                showEditForm = false;
                ToastService.ShowSuccess("Profile updated successfully");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
            {
                var error = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                modalError = error?["message"] ?? "Email already in use";
            }
            else
            {
                var content = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error content: {content}");
                modalError = "Failed to update profile";
            }
        }
        catch (Exception ex)
        {
            modalError = "Error updating profile";
            Console.Error.WriteLine($"Error updating profile: {ex}");
        }
    }
}