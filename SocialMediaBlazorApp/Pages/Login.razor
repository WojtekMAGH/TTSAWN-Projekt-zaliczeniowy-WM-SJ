@page "/login"
@using SocialMediaBlazorApp.Services
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

<PageTitle>Login</PageTitle>

<div class="login-container">
    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
            <ValidationMessage For="@(() => loginModel.Email)" />
        </div>

        <div class="form-group">
            <label for="password">Password:</label>
            <InputText type="password" id="password" @bind-Value="loginModel.Password" class="form-control" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        <button type="submit" class="btn btn-primary w-100">Login</button>
    </EditForm>

    <div class="register-link-container mt-4 text-center">
        <a href="/register" class="btn btn-outline-success btn-sm w-100">
            <i class="fas fa-user-plus"></i> Register Here
        </a>
    </div>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-3" role="alert">
            @ErrorMessage
        </div>
    }

</div>

<style>
    .login-container {
        max-width: 400px;
        margin: 0 auto;
        padding: 2rem;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .register-link-container {
        margin-top: 1rem;
    }

        .register-link-container .btn {
            font-weight: bold;
        }

            .register-link-container .btn:hover {
                background-color: #28a745;
                color: #fff;
                text-decoration: none;
            }
</style>

@code {
    private LoginModel loginModel = new();
    private string? ErrorMessage;

    private class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = string.Empty;
    }

    private async Task HandleLogin()
    {
        try
        {
            var token = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);

            if (!string.IsNullOrWhiteSpace(token))
            {
                ToastService.ShowSuccess("Login successful! Redirecting to your homepage...");
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", token);
                NavigationManager.NavigateTo("/home", forceLoad: true);
            }
        }
        catch (InvalidOperationException ex)
        {
            ToastService.ShowError(ex.Message);
        }
        catch (ValidationException ex)
        {
            ToastService.ShowWarning(ex.Message);
        }
        catch (Exception ex)
        {
            ToastService.ShowError("An unexpected error occurred. Please try again later.");
            Console.Error.WriteLine($"Login error: {ex}");
        }
    }
}
